// This is your Prisma schema file for MongoDB
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Login Provider Types
enum LoginProvider {
  WALLET
  GOOGLE
  FACEBOOK
  TWITTER
  DISCORD
  EMAIL
}

// User Profile Model
model UserProfile {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  user          String        @unique // Wallet address or provider:providerId
  name          String
  username      String        @unique
  description   String?
  image         String?       // IPFS URL or external URL
  provider      LoginProvider @default(WALLET)
  providerId    String?       // For social login providers
  email         String?
  walletAddress String?       // Optional wallet link for social login users
  createdAt     DateTime      @default(now())
  timestamp     DateTime      @default(now())
  lastUpdated   DateTime      @updatedAt
  metadata      Json?         // Additional user metadata

  @@map("user_profiles")
}

// Contract User Model (for blockchain integration)
model ContractUser {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress   String   @unique
  contractData    Json     // Data from smart contract
  syncedToBackend Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("contract_users")
}

// Game Results for betting oracle
enum GameStatus {
  COMPLETED
  PENDING
  CANCELLED
}

enum GameOutcome {
  WIN
  LOSE
  DRAW
}

model GameResult {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  gameId      String      @unique
  status      GameStatus
  outcome     GameOutcome
  winner      String?
  loser       String?
  score       Json? // { player1: number, player2: number }
  provider    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("game_results")
}

// Football Match Results (for caching and historical data)
model FootballMatch {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  fixtureId     Int      @unique // API-Football fixture ID
  homeTeam      String
  awayTeam      String
  homeTeamId    Int
  awayTeamId    Int
  homeScore     Int?
  awayScore     Int?
  status        String   // NS, FT, 1H, 2H, etc.
  matchDate     DateTime
  league        String
  leagueId      Int
  season        Int
  venue         String?
  lastUpdated   DateTime @updatedAt
  createdAt     DateTime @default(now())
  metadata      Json?    // Additional match data

  @@map("football_matches")
}

// Betting Records (optional - for storing bets)
model Bet {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   // Reference to user
  fixtureId       Int      // Football match fixture ID
  prediction      String   // User's prediction (team name, over/under, etc.)
  betType         String   // win, draw, over, under, etc.
  amount          Float
  odds            Float
  potentialWin    Float
  status          String   // pending, won, lost, cancelled
  settledAt       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("bets")
}
