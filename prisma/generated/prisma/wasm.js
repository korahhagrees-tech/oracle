
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  user: 'user',
  name: 'name',
  username: 'username',
  description: 'description',
  image: 'image',
  provider: 'provider',
  providerId: 'providerId',
  email: 'email',
  walletAddress: 'walletAddress',
  createdAt: 'createdAt',
  timestamp: 'timestamp',
  lastUpdated: 'lastUpdated',
  metadata: 'metadata'
};

exports.Prisma.ContractUserScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  contractData: 'contractData',
  syncedToBackend: 'syncedToBackend',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameResultScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId',
  status: 'status',
  outcome: 'outcome',
  winner: 'winner',
  loser: 'loser',
  score: 'score',
  provider: 'provider',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FootballMatchScalarFieldEnum = {
  id: 'id',
  fixtureId: 'fixtureId',
  homeTeam: 'homeTeam',
  awayTeam: 'awayTeam',
  homeTeamId: 'homeTeamId',
  awayTeamId: 'awayTeamId',
  homeScore: 'homeScore',
  awayScore: 'awayScore',
  status: 'status',
  matchDate: 'matchDate',
  league: 'league',
  leagueId: 'leagueId',
  season: 'season',
  venue: 'venue',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  metadata: 'metadata'
};

exports.Prisma.BetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fixtureId: 'fixtureId',
  prediction: 'prediction',
  betType: 'betType',
  amount: 'amount',
  odds: 'odds',
  potentialWin: 'potentialWin',
  status: 'status',
  settledAt: 'settledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.LoginProvider = exports.$Enums.LoginProvider = {
  WALLET: 'WALLET',
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK',
  TWITTER: 'TWITTER',
  DISCORD: 'DISCORD',
  EMAIL: 'EMAIL'
};

exports.GameStatus = exports.$Enums.GameStatus = {
  COMPLETED: 'COMPLETED',
  PENDING: 'PENDING',
  CANCELLED: 'CANCELLED'
};

exports.GameOutcome = exports.$Enums.GameOutcome = {
  WIN: 'WIN',
  LOSE: 'LOSE',
  DRAW: 'DRAW'
};

exports.Prisma.ModelName = {
  UserProfile: 'UserProfile',
  ContractUser: 'ContractUser',
  GameResult: 'GameResult',
  FootballMatch: 'FootballMatch',
  Bet: 'Bet'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\patri\\Documents\\CLEINT WORK\\oracle\\prisma\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      },
      {
        "fromEnvVar": null,
        "value": "linux-arm64-openssl-3.0.x"
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\patri\\Documents\\CLEINT WORK\\oracle\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mongodb",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file for MongoDB\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider      = \"prisma-client-js\"\n  output        = \"./generated/prisma\"\n  binaryTargets = [\"native\", \"linux-arm64-openssl-3.0.x\"]\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Login Provider Types\nenum LoginProvider {\n  WALLET\n  GOOGLE\n  FACEBOOK\n  TWITTER\n  DISCORD\n  EMAIL\n}\n\n// User Profile Model\nmodel UserProfile {\n  id            String        @id @default(auto()) @map(\"_id\") @db.ObjectId\n  user          String        @unique // Wallet address or provider:providerId\n  name          String\n  username      String        @unique\n  description   String?\n  image         String? // IPFS URL or external URL\n  provider      LoginProvider @default(WALLET)\n  providerId    String? // For social login providers\n  email         String?\n  walletAddress String? // Optional wallet link for social login users\n  createdAt     DateTime      @default(now())\n  timestamp     DateTime      @default(now())\n  lastUpdated   DateTime      @updatedAt\n  metadata      Json? // Additional user metadata\n\n  @@map(\"user_profiles\")\n}\n\n// Contract User Model (for blockchain integration)\nmodel ContractUser {\n  id              String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  walletAddress   String   @unique\n  contractData    Json // Data from smart contract\n  syncedToBackend Boolean  @default(false)\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  @@map(\"contract_users\")\n}\n\n// Game Results for betting oracle\nenum GameStatus {\n  COMPLETED\n  PENDING\n  CANCELLED\n}\n\nenum GameOutcome {\n  WIN\n  LOSE\n  DRAW\n}\n\nmodel GameResult {\n  id        String      @id @default(auto()) @map(\"_id\") @db.ObjectId\n  gameId    String      @unique\n  status    GameStatus\n  outcome   GameOutcome\n  winner    String?\n  loser     String?\n  score     Json? // { player1: number, player2: number }\n  provider  String\n  createdAt DateTime    @default(now())\n  updatedAt DateTime    @updatedAt\n\n  @@map(\"game_results\")\n}\n\n// Football Match Results (for caching and historical data)\nmodel FootballMatch {\n  id          String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  fixtureId   Int      @unique // API-Football fixture ID\n  homeTeam    String\n  awayTeam    String\n  homeTeamId  Int\n  awayTeamId  Int\n  homeScore   Int?\n  awayScore   Int?\n  status      String // NS, FT, 1H, 2H, etc.\n  matchDate   DateTime\n  league      String\n  leagueId    Int\n  season      Int\n  venue       String?\n  lastUpdated DateTime @updatedAt\n  createdAt   DateTime @default(now())\n  metadata    Json? // Additional match data\n\n  @@map(\"football_matches\")\n}\n\n// Betting Records (optional - for storing bets)\nmodel Bet {\n  id           String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  userId       String // Reference to user\n  fixtureId    Int // Football match fixture ID\n  prediction   String // User's prediction (team name, over/under, etc.)\n  betType      String // win, draw, over, under, etc.\n  amount       Float\n  odds         Float\n  potentialWin Float\n  status       String // pending, won, lost, cancelled\n  settledAt    DateTime?\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n\n  @@map(\"bets\")\n}\n",
  "inlineSchemaHash": "8e7dfff39c6bd176db84878706adf274b27b7be0664238a6aac09a21c5b93671",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"UserProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"user\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"enum\",\"type\":\"LoginProvider\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"walletAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":\"user_profiles\"},\"ContractUser\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"walletAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contractData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"syncedToBackend\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"contract_users\"},\"GameResult\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"gameId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"GameStatus\"},{\"name\":\"outcome\",\"kind\":\"enum\",\"type\":\"GameOutcome\"},{\"name\":\"winner\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"loser\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"game_results\"},\"FootballMatch\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"fixtureId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"homeTeam\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"awayTeam\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"homeTeamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"awayTeamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"homeScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"awayScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"matchDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"league\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"leagueId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"season\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"venue\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":\"football_matches\"},\"Bet\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fixtureId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"prediction\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"betType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"odds\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"potentialWin\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"settledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"bets\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

